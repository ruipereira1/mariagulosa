import readline from 'readline'

// Interface para input do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

// Regras de seguran√ßa
const securityRules = {
  basic: `rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // üéÇ BOLOS - Apenas leitura p√∫blica
    match /cakes/{cakeId} {
      allow read: if true;
      allow write: if false;
    }
    
    // üì¶ PEDIDOS - Apenas cria√ß√£o p√∫blica
    match /orders/{orderId} {
      allow create: if true;
      allow read, update, delete: if false;
    }
  }
}`,

  intermediate: `rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // üéÇ BOLOS - Leitura p√∫blica, escrita para autenticados
    match /cakes/{cakeId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // üì¶ PEDIDOS - Cria√ß√£o p√∫blica, admin pode ler/editar
    match /orders/{orderId} {
      allow create: if true;
      allow read, update: if request.auth != null 
        && request.auth.token.admin == true;
      allow delete: if false;
    }
  }
}`,

  advanced: `rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fun√ß√£o para verificar admin
    function isAdmin() {
      return request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // üéÇ BOLOS - Leitura p√∫blica, escrita apenas admin
    match /cakes/{cakeId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // üì¶ PEDIDOS - Cria√ß√£o com valida√ß√£o
    match /orders/{orderId} {
      allow create: if request.auth == null
        && resource == null
        && request.resource.data.keys().hasAll([
          'orderNumber', 'items', 'totalPrice', 'createdAt'
        ]);
      
      allow read, update: if isAdmin();
      allow delete: if false;
    }
  }
}`
}

// Fun√ß√£o principal
const main = async () => {
  console.log('üîí CONFIGURA√á√ÉO DE SEGURAN√áA FIREBASE')
  console.log('====================================\n')
  
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Suas regras atuais s√£o INSEGURAS!')
  console.log('   Qualquer pessoa pode acessar e modificar seus dados.\n')
  
  console.log('üõ°Ô∏è  OP√á√ïES DE SEGURAN√áA DISPON√çVEIS:\n')
  console.log('1. üü¢ B√ÅSICA - Recomendada para come√ßar')
  console.log('   ‚Ä¢ Bolos: apenas leitura')
  console.log('   ‚Ä¢ Pedidos: apenas cria√ß√£o')
  console.log('')
  console.log('2. üü° INTERMEDI√ÅRIA - Com autentica√ß√£o')
  console.log('   ‚Ä¢ Bolos: leitura p√∫blica, escrita autenticada')
  console.log('   ‚Ä¢ Pedidos: cria√ß√£o p√∫blica, admin pode gerenciar')
  console.log('')
  console.log('3. üî¥ AVAN√áADA - M√°xima seguran√ßa')
  console.log('   ‚Ä¢ Valida√ß√£o completa de dados')
  console.log('   ‚Ä¢ Controle granular de permiss√µes')
  console.log('')
  
  const choice = await new Promise((resolve) => {
    rl.question('Escolha uma op√ß√£o (1, 2 ou 3): ', (answer) => {
      resolve(answer.trim())
    })
  })
  
  let selectedRules
  let ruleName
  
  switch (choice) {
    case '1':
      selectedRules = securityRules.basic
      ruleName = 'B√ÅSICA'
      break
    case '2':
      selectedRules = securityRules.intermediate
      ruleName = 'INTERMEDI√ÅRIA'
      break
    case '3':
      selectedRules = securityRules.advanced
      ruleName = 'AVAN√áADA'
      break
    default:
      console.log('‚ùå Op√ß√£o inv√°lida. Usando regras B√ÅSICAS.')
      selectedRules = securityRules.basic
      ruleName = 'B√ÅSICA'
  }
  
  console.log(`\nüîí REGRAS DE SEGURAN√áA ${ruleName}:`)
  console.log('=' + '='.repeat(30 + ruleName.length))
  console.log(selectedRules)
  console.log('')
  
  console.log('üìã COMO APLICAR:')
  console.log('1. Acesse: https://console.firebase.google.com')
  console.log('2. Projeto: maria-gulosa-b460f')
  console.log('3. Firestore Database ‚Üí Regras')
  console.log('4. Copie e cole as regras acima')
  console.log('5. Clique "Publicar"')
  console.log('')
  
  console.log('‚úÖ BENEF√çCIOS:')
  console.log('‚Ä¢ Prote√ß√£o contra ataques')
  console.log('‚Ä¢ Dados dos clientes protegidos')
  console.log('‚Ä¢ Conformidade com LGPD/GDPR')
  console.log('‚Ä¢ Controle de acesso adequado')
  console.log('')
  
  if (choice === '2' || choice === '3') {
    console.log('‚ö†Ô∏è  NOTA: Op√ß√µes 2 e 3 requerem Firebase Authentication')
    console.log('   Para usar o painel admin, voc√™ precisar√° configurar login.')
  }
  
  console.log('\nüéÇ Ap√≥s aplicar as regras, seu sistema estar√° seguro!')
  
  rl.close()
}

// Executar
main().catch(console.error) 